// Code generated by mcp-codegen. DO NOT EDIT.
package godoc

import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	mcp "github.com/ktr0731/go-mcp"
	"github.com/ktr0731/go-mcp/protocol"
)

// ServerPromptHandler is the interface for prompt handlers.
type ServerPromptHandler interface {
}

// ServerToolHandler is the interface for tool handlers.
type ServerToolHandler interface {
	HandleToolGolangListPackages(ctx context.Context, req *ToolGolangListPackagesRequest) (*mcp.CallToolResult, error)
	HandleToolGolangInspectPackage(ctx context.Context, req *ToolGolangInspectPackageRequest) (*mcp.CallToolResult, error)
	HandleToolGolangGetStructDoc(ctx context.Context, req *ToolGolangGetStructDocRequest) (*mcp.CallToolResult, error)
	HandleToolGolangGetFuncDoc(ctx context.Context, req *ToolGolangGetFuncDocRequest) (*mcp.CallToolResult, error)
	HandleToolGolangGetMethodDoc(ctx context.Context, req *ToolGolangGetMethodDocRequest) (*mcp.CallToolResult, error)
	HandleToolGolangGetConstAndVarDoc(ctx context.Context, req *ToolGolangGetConstAndVarDocRequest) (*mcp.CallToolResult, error)
}

// ToolGolangListPackagesRequest contains input parameters for the golang_list_packages tool.
type ToolGolangListPackagesRequest struct {
}

// ToolGolangInspectPackageRequest contains input parameters for the golang_inspect_package tool.
type ToolGolangInspectPackageRequest struct {
	PackageName     string `json:"package_name"`
	IncludeComments bool   `json:"include_comments,omitempty"`
}

// ToolGolangGetStructDocRequest contains input parameters for the golang_get_struct_doc tool.
type ToolGolangGetStructDocRequest struct {
	PackageName string `json:"package_name"`
	StructName  string `json:"struct_name"`
}

// ToolGolangGetFuncDocRequest contains input parameters for the golang_get_func_doc tool.
type ToolGolangGetFuncDocRequest struct {
	PackageName string `json:"package_name"`
	FuncName    string `json:"func_name"`
}

// ToolGolangGetMethodDocRequest contains input parameters for the golang_get_method_doc tool.
type ToolGolangGetMethodDocRequest struct {
	PackageName string `json:"package_name"`
	StructName  string `json:"struct_name"`
	MethodName  string `json:"method_name"`
}

// ToolGolangGetConstAndVarDocRequest contains input parameters for the golang_get_const_and_var_doc tool.
type ToolGolangGetConstAndVarDocRequest struct {
	PackageName string `json:"package_name"`
}

// PromptList contains all available prompts.
var PromptList = []protocol.Prompt{}

// JSON Schema type definitions generated from inputSchema
var (
	ToolGolangListPackagesInputSchema      = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{},"additionalProperties":false,"type":"object"}`)
	ToolGolangInspectPackageInputSchema    = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"package_name":{"type":"string","description":"Package name"},"include_comments":{"type":"boolean","description":"Whether to include comments","default":true}},"additionalProperties":false,"type":"object","required":["package_name"]}`)
	ToolGolangGetStructDocInputSchema      = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"package_name":{"type":"string","description":"Package name where the struct is defined"},"struct_name":{"type":"string","description":"Name of the struct"}},"additionalProperties":false,"type":"object","required":["package_name","struct_name"]}`)
	ToolGolangGetFuncDocInputSchema        = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"package_name":{"type":"string","description":"Package name where the function is defined"},"func_name":{"type":"string","description":"Name of the function"}},"additionalProperties":false,"type":"object","required":["package_name","func_name"]}`)
	ToolGolangGetMethodDocInputSchema      = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"package_name":{"type":"string","description":"Package name where the method is defined"},"struct_name":{"type":"string","description":"Name of the struct that owns the method"},"method_name":{"type":"string","description":"Name of the method"}},"additionalProperties":false,"type":"object","required":["package_name","struct_name","method_name"]}`)
	ToolGolangGetConstAndVarDocInputSchema = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"package_name":{"type":"string","description":"Package name"}},"additionalProperties":false,"type":"object","required":["package_name"]}`)
)

// ToolList contains all available tools.
var ToolList = []protocol.Tool{
	{
		Name:        "golang_list_packages",
		Description: "Display a list of Go packages and their package comments. You can check the description and purpose of each package.",
		InputSchema: ToolGolangListPackagesInputSchema,
	},
	{
		Name:        "golang_inspect_package",
		Description: "List publicly available structs, methods, and functions in the specified Go package. You can check comments for each element.",
		InputSchema: ToolGolangInspectPackageInputSchema,
	},
	{
		Name:        "golang_get_struct_doc",
		Description: "Display detailed information about the specified Go struct. You can check the struct's comments, fields, methods, and their comments.",
		InputSchema: ToolGolangGetStructDocInputSchema,
	},
	{
		Name:        "golang_get_func_doc",
		Description: "Display detailed information about the specified Go function. You can check the function's signature, comments, and usage examples.",
		InputSchema: ToolGolangGetFuncDocInputSchema,
	},
	{
		Name:        "golang_get_method_doc",
		Description: "Display detailed information about the specified Go struct method. You can check the method's signature, comments, and usage examples.",
		InputSchema: ToolGolangGetMethodDocInputSchema,
	},
	{
		Name:        "golang_get_const_and_var_doc",
		Description: "Display detailed information about constants and variables in the specified Go package. You can check the type, value, and comments for each constant and variable.",
		InputSchema: ToolGolangGetConstAndVarDocInputSchema,
	},
}

// NewHandler creates a new MCP handler.
func NewHandler(toolHandler ServerToolHandler) *mcp.Handler {
	h := &mcp.Handler{}
	h.Capabilities = protocol.ServerCapabilities{
		Tools:   &protocol.ToolCapability{},
		Logging: &protocol.LoggingCapability{},
	}
	h.Implementation = protocol.Implementation{
		Name:    "GoDoc MCP Server",
		Version: "0.0.1",
	}
	h.Tools = ToolList
	h.ToolHandler = protocol.ServerHandlerFunc[protocol.CallToolRequestParams](func(ctx context.Context, method string, req protocol.CallToolRequestParams) (any, error) {
		idx := slices.IndexFunc(ToolList, func(t protocol.Tool) bool {
			return t.Name == req.Name
		})
		if idx == -1 {
			return nil, fmt.Errorf("tool not found: %s", req.Name)
		}
		switch method {
		case "tools/call":
			switch req.Name {
			case "golang_list_packages":
				var in ToolGolangListPackagesRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangListPackages(ctx, &in)
			case "golang_inspect_package":
				var in ToolGolangInspectPackageRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangInspectPackage(ctx, &in)
			case "golang_get_struct_doc":
				var in ToolGolangGetStructDocRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangGetStructDoc(ctx, &in)
			case "golang_get_func_doc":
				var in ToolGolangGetFuncDocRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangGetFuncDoc(ctx, &in)
			case "golang_get_method_doc":
				var in ToolGolangGetMethodDocRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangGetMethodDoc(ctx, &in)
			case "golang_get_const_and_var_doc":
				var in ToolGolangGetConstAndVarDocRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGolangGetConstAndVarDoc(ctx, &in)
			default:
				return nil, fmt.Errorf("tool not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	return h
}
